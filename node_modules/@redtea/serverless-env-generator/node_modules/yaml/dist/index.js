'use strict';

var PlainValue = require('./PlainValue-ec8e588e.js');
var parseCst = require('./parse-ab8de154.js');
require('./resolveSeq-6b2dc4ac.js');
var Document$1 = require('./Document-59bd9290.js');
require('./Schema-fe1471c4.js');

/* global console, process, YAML_SILENCE_WARNINGS */
function warn(warning, type) {
  if (typeof YAML_SILENCE_WARNINGS !== 'undefined' && YAML_SILENCE_WARNINGS) return;

  if (typeof process !== 'undefined') {
    if (process.env.YAML_SILENCE_WARNINGS) return; // This will throw in Jest if `warning` is an Error instance due to
    // https://github.com/facebook/jest/issues/2549

    if (process.emitWarning) {
      process.emitWarning(warning, type);
      return;
    }
  } // eslint-disable-next-line no-console


  console.warn(type ? `${type}: ${warning}` : warning);
}

class Document extends Document$1.Document {
  constructor(contents, options) {
    super(contents, Object.assign({}, Document$1.defaultOptions, options));
  }

}

function parseAllDocuments(src, options) {
  const stream = [];
  let prev;

  for (const cstDoc of parseCst.parse(src)) {
    const doc = new Document(undefined, options);
    doc.parse(cstDoc, prev);
    stream.push(doc);
    prev = doc;
  }

  return stream;
}

function parseDocument(src, options) {
  const cst = parseCst.parse(src);
  const doc = new Document(cst[0], options);

  if (cst.length > 1) {
    const errMsg = 'Source contains multiple documents; please use YAML.parseAllDocuments()';
    doc.errors.unshift(new PlainValue.YAMLSemanticError(cst[1], errMsg));
  }

  return doc;
}

function parse(src, options) {
  const doc = parseDocument(src, options);
  doc.warnings.forEach(warning => warn(warning));
  if (doc.errors.length > 0) throw doc.errors[0];
  return doc.toJSON();
}

function stringify(value, options) {
  if (value === undefined) return '\n';
  return new Document(value, options).toString();
}

const YAML = {
  defaultOptions: Document$1.defaultOptions,
  Document,
  parse,
  parseAllDocuments,
  parseCST: parseCst.parse,
  parseDocument,
  scalarOptions: Document$1.scalarOptions,
  stringify
};

exports.YAML = YAML;
